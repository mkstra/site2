1593272942112:(ns site2.util)
1593272944138:roamdata
1593272951677:(def a 5)
1593272952493:5
1593272952912:a
1593272976410:site2.parsing/code-suffix
1593272990628:'site2.parsing/code-suffix
1593273178369:(ns site2.util)
1593273180097:roamdata
1593273711500:(require site2.util)
1593273717133:(require 'site2.util)
1593273719004:roamdata
1593273899063:(require 'site2.util)
1593273905460:(map :title roamdata)
1593273917263:(map (:title) roamdata)
1593273922540:roamdata
1593273926374:(require 'site2.util)
1593273954951:require 'site2.util
1593273963494:(require 'site2.util)
1593273966956:roamdta
1593273968562:roamdata
1593273974326:(:require 'site2.util)
1593273975570:roamdata
1593274024644:(ns site2.util)
1593274027121:roamdata
1593274174281:(js/alert "hello")
1593274217325:example
1593274223649:(maap :s example)
1593274227952:(map :s example)
1593274246796:(map (-> :s :c) example)
1593274260507:(map (-> :c :uid) example)
1593283026663:(ns site2.util)
1593283031404:roamdata
1593283067741:(filter :title roamdata)
1593283588722:str [:div "ABC"]
1593283600460:(str [:div "ABC"])
1593283618592:(cljs.reader/read (str [:div "ABC"]))
1593283645579:(cljs.reader/read-string (str [:div "ABC"]))
1593284624978:(for [w "a b c"] w)
1593284702502:(sort (:title) roamdata)
1593284709821:(sort :title roamdata)
1593284732164:(sort :string roamdata)
1593284812924:(sort-by :string roamdata)
1593284823087:(sort-by :title roamdata)
1593284864055:(map :title (sort-by :title roamdata))
1593284871634:(map :title (sort-by :string roamdata))
1593285139314:(map :title roamdata))
1593285147407:(tree-seq roamdata)
1593288969973:git add .
1593290045295:(reduce str-reducer "a a f s")
1593290053554:(defn str-reducer [prev next]\n  (str prev next)\n  )
1593290055423:(reduce str-reducer "a a f s")
1593290068665:(defn str-reducer [prev next]\n  (str prev prev)\n  )
1593290070678:(reduce str-reducer "a a f s")
1593290091027:(count (reduce str-reducer "a a f s"))
1593290174039:(ns site2.util)
1593290178266:roamdata
1593290186827:(require 'site2.util)
1593290188557:roamdata
1593290192385:(defn get-ref [word]                                        ;check for nils\n  (filter #(= (:uid %) word) roamdata))
1593290623281:(cljs.read/read-string "[:div "aa"]")
1593290634543:(cljs.reader/read-string "[:div "aa"]")
1593290732975:str [:div "aa"]
1593290741321:(str [:div "aa"])
1593290751117:(cljs.reader/read-string (str [:div "aa"]))
1593290754803:(cljs.reader/read-string (str [:div "aa"])))
1593290771271:(cljs.reader/read-string (str [:div "aa"]))
1593290790428:(cljs.reader/read-string (str [:div "b"]))
1593290916288:word-to-ref
1593290930276:(word-to-ref "aaaa")
1593290950841:(word-to-ref "((W3miO3A3o))")
1593291077275:str-replace
1593291098351:(str-replace (second roamdata))
1593291105949:(str-replace (first roamdata))
1593291119188:(str-replace (third roamdata))
1593291146147:(str-replace (nth roamdata 3))
1593291149790:(str-replace (nth roamdata 2))
1593291354730:seq ("a aa ")
1593291362760:seq "a aa"
1593291386400:(str-replace (seq "a a s s"))
1593291425223:(str-replace (nth roamdata 2))
1593291456982::r
1593291459456:(str-replace (nth roamdata 2))
1593291764808:(split (" aa aa ss"))
1593291768284:(split (" aa aa ss") "")
1593291770788:(split (" aa aa ss") #"")
1593291781454:(split (" aa aa ss") #" ")
1593291789074:(split (" aa aa ss") #"")
1593291793312:split
1593291796622:string/split
1593291800861:clojure.string/split
1593291819192:(clojure.string/split "a a asss" #"")
1593291828465:(clojure.string/split "a a asss")
1593291831112:(clojure.string/split "a a asss" "")
1593292112521:(join (clojure.string/split "a a asss" ""))
1593292234635:(clojure.string/join (clojure.string/split "a a asss" ""))
1593292244756:(str (clojure.string/split "a a asss" ""))
1593292404261:(override-str (nth roamdata 2))
1593292419135:(override-str "aaaaaasasds sadsd" )
1593292449777:(#(reduce str-reducer %) ["a" "b" "HALL"])
1593292494177:(defn override-str [txt]\n  (-> txt\n      #(clojure.string/split % "")\n      #(reduce str-reducer %)\n      #(clojure.string/join % "") ;could use str too? has escape symbols\n\n))
1593292557310:(#(clojure.string/split % "") "asd sawd awa")
1593292575391:(#(clojure.string/split % " ") "asd sawd awa")
1593292616964:(defn override-str [txt]\n  (-> txt\n      #(clojure.string/split % " ")\n      #(reduce str-reducer %)\n      #(clojure.string/join % "") ;could use str too? has escape symbols\n\n))
1593292639362:(defn override-str [txt]\n  (-> txt\n      #(clojure.string/split % " ")\n      #(reduce str-reducer %)\n      #(clojure.string/join % "") \n      ;could use str too? has escape symbols\n\n))
1593292669699:(defn override-str [txt]\n  (-> txt\n      (#(clojure.string/split % " "))\n      ;#(reduce str-reducer %)\n      ;#(clojure.string/join % "") \n      ;could use str too? has escape symbols\n\n))
1593292732750:(override-str "aaaaaasasds sadsd" )
1593292744837:(override-str (nth roamdata 2))
1593292764877:(#(reduce str-reducer %) ["aaaa affff"])
1593292798426:(#(reduce str-reducer %) ["aaaa" "aasdad"])
1593292810643:(#(reduce str-reducer %) ["aaaa" "aasdad" "((_MGrRoKxi))"])
1593292915963:(override-str (nth roamdata 2))
1593292933370:(override-str (:string (nth roamdata 2)))
1593292943271:(nth roamdata 2)
1593292973647:(:string (nth roamdata 2))
1593293002280:(#(reduce str-reducer %) ["aaaa" "aasdad" "((_MGrRoKxi))"])
1593293055254:"This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))"
1593293061797:(def test "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))")
1593293064762:test
1593293143148:(clojure.string/split "r a s dddd" " ")
1593293174286:(clojure.string/split "r a s dddd jew" " ")
1593293185062:(clojure.string/split test " ")
1593293188789:test
1593293194377:(clojure.string/split tester " ")
1593293204992:(def test "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))")
1593293221382:(def testst "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))")
1593293227328:(clojure.string/split testst " ")
1593293294381:(override-str testst)
1593293388547:(clojure.string/join "ad bb ww")
1593293397730:(clojure.string/join "ad bb ww" " ")
1593293518518:(override-str testst)
1593293567699:(type [:h])
1593293702242:(override-str testst)
1593293709214:testst
1593293712990:(override-str testst)
1593293752460:(override-str "aas")
1593293767579:(override-str "aas asdas")
1593293769072::r
1593293773532::reload
1593293778310:(ns site2.util)
1593293782933:(override-str "aas asdas")
1593293933448:_
1593293935505:-
1593293941709:*1
1593294004215:(override-str "aas asdas")
1593294005688:*1
1593294006827:*2
1593294015984:(override-str "aas asdas")
1593294020954:(str *1)
1593294035831:(cljs.reader/read-string *1)
1593294556364:(override-str "aas asdas")
1593294719563:(cljs.reader/read-string *1)
1593294723001:(override-str "aas asdas")
1593294726668:(cljs.reader/read-string *1)
1593294734673::r
1593294747475:(ns site2.util)
1593294846518:(:require \n   [cljs.reader :refer read-string]\n   )
1593294850493:(cljs.reader/read-string *1)
1593294857066:(cljs.reader/read-string "aaa")
1593294952031:(override-str "aas asdas")
1593294958062:(cljs.reader/read-string "aaa")
1593294961195:(override-str "aas asdas")
1593294971236:(cljs.reader/read-string "aaa")
1593294975489:(cljs.reader/read-string "aaa aaa" )
1593294979664:(cljs.reader/read-string "aaa aaa sdw" )
1593295062521:(ns site2.util)
1593295066159:(cljs.reader/read-string "aaa aaa sdw" )
1593295173970:(override-str)
1593295182341:(override-str "asd")
1593295218727:read-str
1593295221040:read-string
1593295235194:(require 'site2.util)
1593295236821:read-string
1593295239946:(override-str "asd")
1593295241792:read-string
1593295253351:(:require [cljs.reader :refer [read-string]])
1593295263383:(require '[cljs.reader :refer [read-string]])
1593295268865:read-string
1593295275351:(read-string "aa ss")
1593295282423:(read-string "sssww ss")
1593295292483:(read-string "[:a sssww ss]")
1593295306451:(read-string "[:p sssww [:span  ss]]")
1593295341918:(override-str "asd")
1593295372143:(override-str (:string (nth roamdata 2)))
1593296010452:(filter #(-> % not zero?) [0 1 0 2 0 3 0 4])
1593296039437:(filter #(-> not zero?) [0 1 0 2 0 3 0 4])
1593296054840:(filter (-> not zero?) [0 1 0 2 0 3 0 4])
1593296168048:(override-str "asd")
1593297366761:roamdata
1593297518792:(override-str "((W3miO3A3o))")
1593297700515:(clojure.string/split "((ADSAD))" " ")
1593297705322:(override-str "((W3miO3A3o))")
1593297765238:(override-str "W3miO3A3o")
1593297801652:(word-to-ref "W3mi03A3o")
1593297828366:(word-to-ref "((W3mi03A3o))")
1593297850262:(override-str "aas asdas")
1593297854362:(override-str "((W3miO3A3o))")
1593297879485:(override-str (nth roamdata 2))
1593298092720:(override-str "((W3miO3A3o))")
1593298115512:[((asdasd))]
1593298138154:(override-str "W3miO3A3o")
1593298150976:(override-str "W3miO3A3o aaa")
1593298182454:(word-to-ref "W3miO3A3o")
1593298198093:(word-to-ref "((W3miO3A3o))")
1593298210094:(word-to-ref "((w2bxHamUp))")
1593298234167:(override-str "((W3miO3A3o))")
1593298265918:(type w2bxHamUp)
1593298271433:(type "w2bxHamUp")
1593298290245:(override-str "((W3miO3A3o))")
1593298328622::r
1593298330553:(override-str "((W3miO3A3o))")
1593298334591::reload
1593298336628:(override-str "((W3miO3A3o))")
1593298496657:\\
1593298516819:(ns site2.util)
1593298520290:(override-str "((W3miO3A3o))")
1593298699596:(override-str "((aGSplMmjW)). We thought this required larger system to perform")
1593298757460:(word-to-ref "((aGSplMmjW))")
1593298818293:(override-str "((aGSplMmjW)). We thought this required larger system to perform")
1593298941261::reload
1593298942634:(override-str "((aGSplMmjW)). We thought this required larger system to perform")
1593299397956:(re-matches #"\\[(.*?)\\]" "[[ asdasd ]]")
1593299406210:(re-matches #"\\[(.*?)\\]" "[ asdasd ]")
1593299416537:(re-matches #"\\[(.*?)\\]" "[asdasd ]")
1593299435823:(re-matches #"/\\(([^()]*)\\)/g" "asdasd")
1593299442007:(re-matches #"/\\(([^()]*)\\)/g" "(aaa)")
1593299448118:(re-matches #"/\\(([^()]*)\\)/g" "((aaa))")
1593299453607:(re-matches #"/\\(([^()]*)\\)/g" "(( aaa ))")
1593299457636:(re-matches #"/\\(([^()]*)\\)/g" "(  ( aaa ) )")
1593299485984:(re-find  #"/\\(([^()]*)\\)/g" "(  ( aaa ) )")
1593299494986:(re-find  #"/\\(([^()]*)\\)/g" "((aaa))")
1593299715136:(re-find  #"\\(([^()]*)\\)" "((aaa))")
1593299724318:(re-matches  #"\\(([^()]*)\\)" "((aaa))")
1593299735889:(re-find  #"\\(([^()]*)\\)" "((aaa))")
1593299740550:(re-find  #"\\(([^()]*)\\)" ".((aaa))")
1593299744815:(re-find  #"\\(([^()]*)\\)" ".((aaa)).")
1593299768409:(re-find  #"\\(([^()]*)\\)" ".((aaa )).")
1593299772880:(re-find  #"\\(([^()]*)\\)" ".((aaa_)).")
1593299776005:(re-find  #"\\(([^()]*)\\)" ".((aaa_)))")
1593299899461:(bracket-gone "((aaa))")
1593299916084:(bracket-gone "((aaa)) ((asda))")
1593299920908:(bracket-gone "((aaa))((asda))")
